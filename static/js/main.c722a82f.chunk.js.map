{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","pattern","undefined","useState","Math","random","toFixed","slice","id","touched","setTouched","isValidUrl","test","hasError","hasErrorWithPattern","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isFieldsFilled","filter","length","onSubmit","preventDefault","newImdbUrl","disabled","App","moviesFromServer","visibleMovies","setVisibleMovies","ReactDOM","render","document","getElementById"],"mappings":"iSAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBCSpC,IAAMC,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MAMI,IALJC,aAKI,MALIF,EAKJ,MAJJG,mBAII,sBAJmBD,GAInB,MAHJE,gBAGI,aAFJC,gBAEI,MAFO,WAAQ,EAEf,MADJC,eACI,WADMC,EACN,EAEJ,EAAaC,oBAAS,2BAASR,EAAT,YAffS,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAaa,IAAfC,EAAP,oBAGA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,GAAaV,GAAUA,EAAQW,KAAKhB,GACpCiB,EAAWJ,GAAWV,IAAaH,IAAUK,EAC7Ca,EAAsBL,GAAWV,GAAYE,IAAYU,EAE/D,OACE,sBAAK7B,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQiC,QAASP,EAAlC,SACGX,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACEkC,KAAK,OACLR,GAAIA,EACJ,0BAAkBb,GAClBb,UAAWmC,IAAW,QAAS,CAC7B,YAAaJ,GAAYC,IAE3BhB,YAAaA,EACbF,MAAOA,EACPI,SAAU,SAAAkB,GAAK,OAAIlB,EAASkB,EAAMC,OAAOvB,MAA1B,EACfwB,OAAQ,kBAAMV,GAAW,EAAjB,OAIVG,GAAYC,IACZ,mBAAGhC,UAAU,iBAAb,mBAAkCe,EAAlC,oBAIP,ECvDYwB,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MACzB,EAA0BnB,mBAAS,GAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAA0BrB,mBAAS,IAAnC,mBAAOjB,EAAP,KAAcuC,EAAd,KACA,EAAsCtB,mBAAS,IAA/C,mBAAOhB,EAAP,KAAoBuC,EAApB,KACA,EAA4BvB,mBAAS,IAArC,mBAAOnB,EAAP,KAAe2C,EAAf,KACA,EAA8BxB,mBAAS,IAAvC,mBAAOd,EAAP,KAAgBuC,EAAhB,KACA,EAA4BzB,mBAAS,IAArC,mBAAOV,EAAP,KAAeoC,EAAf,KAGM5B,EAAU,uKAGV6B,EAAiB,CAAC5C,EAAOF,EAAQK,EAASI,GAAQsC,QAAO,SAAAnC,GAAK,OAAKA,CAAL,IAAYoC,OAAS,EAkCzF,OACE,uBAAMlD,UAAU,WAAuBmD,SAzBpB,SAACf,IACpBA,EAAMgB,iBAEDjC,EAAQW,KAAK5B,MAIbiB,EAAQW,KAAKvB,KAYlBiC,EARiB,CACfpC,QACAC,cACAH,SACAK,UACAI,WAvBFgC,EAAS,IACTC,EAAe,IACfC,EAAU,IACVC,EAAW,IACXC,EAAU,IAwBVL,EAASD,EAAQ,IAClB,EAGC,UACE,oBAAIzC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOV,EACPc,SAAUyB,EACV1B,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAOT,EACPa,SAAU0B,IAGZ,cAAC,EAAD,CACE/B,KAAK,SACLE,MAAM,YACND,MAAOZ,EACPgB,SAAU2B,EACV5B,UAAQ,EACRE,QAASA,IAGX,cAAC,EAAD,CACEN,KAAK,UACLE,MAAM,WACND,MAAOP,EACPW,SAAU,SAACmC,GACTP,EAAWO,EACZ,EACDpC,UAAQ,EACRE,QAASA,IAGX,cAAC,EAAD,CACEN,KAAK,SACLE,MAAM,UACND,MAAOH,EACPO,SAAU6B,EACV9B,UAAQ,IAGV,qBAAKjB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEkC,KAAK,SACL,UAAQ,gBACRlC,UAAU,iBACVsD,SAAUN,EAJZ,uBAhD0BP,EA4DnC,E,OC7GYc,EAAM,WACjB,MAA0ClC,mBAASmC,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,OACE,sBAAK1D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQgD,MAEtB,qBAAKzD,UAAU,UAAf,SACE,cAAC,EAAD,CAAUwC,MAAO,SAACzC,GAChB2D,EAAiB,GAAD,mBAAKD,GAAL,CAAoB1D,IACrC,QAKR,EClBD4D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.c722a82f.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  pattern?: RegExp\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  pattern = undefined,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const isValidUrl = pattern ? pattern.test(value) : true;\n  const hasError = touched && required && !value && !pattern;\n  const hasErrorWithPattern = touched && required && pattern && !isValidUrl;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasErrorWithPattern,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {(hasError || hasErrorWithPattern) && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie = ({ onAdd }: Props) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  // eslint-disable-next-line max-len\n  const isFieldsFilled = [title, imgUrl, imdbUrl, imdbId].filter(value => !value).length > 0;\n\n  const clearFormFields = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!pattern.test(imgUrl)) {\n      return;\n    }\n\n    if (!pattern.test(imdbUrl)) {\n      return;\n    }\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    clearFormFields();\n    setCount(count + 1);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n        pattern={pattern}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(newImdbUrl) => {\n          setImdbUrl(newImdbUrl);\n        }}\n        required\n        pattern={pattern}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isFieldsFilled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [visibleMovies, setVisibleMovies] = useState(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => {\n          setVisibleMovies([...visibleMovies, movie]);\n        }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}